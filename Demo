Perfect üëå. Let me now give you the full final versions of all scripts, where all paths and configuration are dynamically passed as environment variables from the pipeline. This ensures developers don‚Äôt have to hardcode anything and can reuse them directly.


---

‚úÖ 1. Lint_sas_code.py

#!/usr/bin/env python3
import os, sys

sas9_code_path = os.environ.get('SAS9_CODE_PATH')
log_path = os.environ.get('CURRENT_LOG_PATH')
main_sas = os.path.join(os.environ.get('DISCOVERY_PATH'), 'Main.sas')

lint_passed_file = os.path.join(log_path, "lint_passed.txt")
lint_failed_file = os.path.join(log_path, "lint_failed.txt")

def lint_file(filepath):
    # Placeholder lint logic: pass if file is non-empty
    with open(filepath, 'r') as f:
        content = f.read().strip()
        return bool(content)  # True = pass, False = fail

# Read Main.sas for job list
with open(main_sas, 'r') as main_f:
    jobs = [line.strip() for line in main_f if line.strip()]

passed, failed = [], []

for job in jobs:
    job_file = os.path.join(sas9_code_path, job)
    if os.path.isfile(job_file):
        if lint_file(job_file):
            passed.append(job)
        else:
            failed.append(job)
    else:
        failed.append(job)

with open(lint_passed_file, 'w') as pf:
    pf.write("\n".join(passed))

with open(lint_failed_file, 'w') as ff:
    ff.write("\n".join(failed))

print(f"‚úÖ Lint completed: {len(passed)} passed, {len(failed)} failed.")
if failed:
    sys.exit(1)


---

‚úÖ 2. Convert_sas9_to_viya.py

#!/usr/bin/env python3
import os, sys, shutil

sas9_code_path = os.environ.get('SAS9_CODE_PATH')
viya_code_path = os.environ.get('VIYA_CODE_PATH')
log_path = os.environ.get('CURRENT_LOG_PATH')
lint_passed_file = os.path.join(log_path, "../lint_passed.txt")

convert_passed_file = os.path.join(log_path, "convert_passed.txt")
convert_failed_file = os.path.join(log_path, "convert_failed.txt")

# Read jobs from lint_passed.txt
if not os.path.isfile(lint_passed_file):
    print("‚ùå Missing lint_passed.txt. Cannot proceed.")
    sys.exit(1)

with open(lint_passed_file, 'r') as f:
    jobs = [line.strip() for line in f if line.strip()]

passed, failed = [], []

for job in jobs:
    src_file = os.path.join(sas9_code_path, job)
    dest_file = os.path.join(viya_code_path, job)
    try:
        os.makedirs(os.path.dirname(dest_file), exist_ok=True)
        shutil.copy2(src_file, dest_file)
        # Simulate conversion logic
        with open(dest_file, 'a') as f:
            f.write("\n* Converted to Viya syntax *\n")
        passed.append(job)
    except Exception as e:
        print(f"‚ùå Conversion failed for {job}: {e}")
        failed.append(job)

with open(convert_passed_file, 'w') as pf:
    pf.write("\n".join(passed))

with open(convert_failed_file, 'w') as ff:
    ff.write("\n".join(failed))

print(f"‚úÖ Conversion completed: {len(passed)} passed, {len(failed)} failed.")
if failed:
    sys.exit(1)


---

‚úÖ 3. Run_viya_jobs.sh

#!/bin/bash
set -e

MAIN_SAS="$DISCOVERY_PATH/Main.sas"
VIYA_CODE_PATH="$VIYA_CODE_PATH"
LOGS_PATH="$CURRENT_LOG_PATH"
MACROS_PATH="$MACROS_PATH"
FORMATS_PATH="$FORMATS_PATH"
CONVERT_PASSED_FILE="$LOGS_PATH/../convert_passed.txt"

RUN_PASSED_FILE="$LOGS_PATH/run_passed.txt"
RUN_FAILED_FILE="$LOGS_PATH/run_failed.txt"

> "$RUN_PASSED_FILE"
> "$RUN_FAILED_FILE"

if [[ ! -f "$CONVERT_PASSED_FILE" ]]; then
  echo "‚ùå convert_passed.txt missing!"
  exit 1
fi

echo "üöÄ Running Viya jobs ..."
while IFS= read -r job; do
    job_path="$VIYA_CODE_PATH/$job"
    echo "üîÑ Running job: $job"
    # Simulate execution (replace with real Viya CLI call)
    if grep -q "fail" "$job_path"; then
        echo "‚ùå Job failed: $job"
        echo "$job" >> "$RUN_FAILED_FILE"
    else
        echo "‚úÖ Job succeeded: $job"
        echo "$job" >> "$RUN_PASSED_FILE"
    fi
done < "$CONVERT_PASSED_FILE"

echo "üèÅ Run stage completed."


---

‚úÖ 4. Compare_outputs.py

#!/usr/bin/env python3
import os, sys

baseline_path = os.environ.get('BASELINE_OUTPUTS_PATH')
viya_output_path = os.environ.get('VIYA_OUTPUTS_PATH')
log_path = os.environ.get('CURRENT_LOG_PATH')
run_passed_file = os.path.join(log_path, "../run_passed.txt")

test_passed_file = os.path.join(log_path, "test_passed.txt")
test_failed_file = os.path.join(log_path, "test_failed.txt")

if not os.path.isfile(run_passed_file):
    print("‚ùå run_passed.txt missing!")
    sys.exit(1)

with open(run_passed_file, 'r') as f:
    jobs = [line.strip() for line in f if line.strip()]

passed, failed = [], []

for job in jobs:
    baseline_file = os.path.join(baseline_path, job.replace('.sas', '.csv'))
    viya_file = os.path.join(viya_output_path, job.replace('.sas', '.csv'))
    if os.path.isfile(viya_file):  # Simulate comparison
        passed.append(job)
    else:
        failed.append(job)

with open(test_passed_file, 'w') as pf:
    pf.write("\n".join(passed))

with open(test_failed_file, 'w') as ff:
    ff.write("\n".join(failed))

print(f"‚úÖ Testing completed: {len(passed)} passed, {len(failed)} failed.")
if failed:
    sys.exit(1)


---

‚úÖ 5. Send_email.sh

(Final version with dynamic variables)

#!/bin/bash

LOGS_PATH=$1
CURRENT_LOG_PATH=$2
EMAIL_RECIPIENT=$3
CI_PIPELINE_URL=$4

EMAIL_BODY="<html><body>"
EMAIL_BODY+="<h2 style='color:#2E86C1;'>üì¢ SAS Viya CI/CD Pipeline Report</h2>"
EMAIL_BODY+="<p>Pipeline: <a href='$CI_PIPELINE_URL'>$CI_PIPELINE_URL</a></p>"
EMAIL_BODY+="<table border='1' cellpadding='8' cellspacing='0' style='border-collapse:collapse;font-family:Arial;'>"
EMAIL_BODY+="<tr style='background-color:#f2f2f2;'>
              <th>Stage</th>
              <th style='color:green;'>‚úÖ Passed</th>
              <th style='color:red;'>‚ùå Failed</th>
              <th>Total</th>
            </tr>"

for stage in lint convert run test deploy; do
    pass_file="$CURRENT_LOG_PATH/${stage}_passed.txt"
    fail_file="$CURRENT_LOG_PATH/${stage}_failed.txt"

    pass_count=$( [ -f "$pass_file" ] && grep -c . "$pass_file" || echo 0 )
    fail_count=$( [ -f "$fail_file" ] && grep -c . "$fail_file" || echo 0 )
    total_count=$((pass_count + fail_count))

    EMAIL_BODY+="<tr>
                    <td><b>${stage^}</b></td>
                    <td>$pass_count</td>
                    <td>$fail_count</td>
                    <td>$total_count</td>
                 </tr>"
done

EMAIL_BODY+="</table>"
EMAIL_BODY+="<p>Check details at: <a href='$CI_PIPELINE_URL'>$CI_PIPELINE_URL</a></p>"
EMAIL_BODY+="<hr><p style='font-size:small;color:gray;'>This report was generated automatically by SAS Viya pipeline.</p>"
EMAIL_BODY+="</body></html>"

echo "$EMAIL_BODY" | mailx -a "Content-Type: text/html" -s "üìä SAS Viya Pipeline Report" "$EMAIL_RECIPIENT"
echo "‚úÖ Email sent to $EMAIL_RECIPIENT"


---
deploy:
  stage: deploy
  script:
    - echo "üöö Starting Deployment for $GROUP_NAME/$APP_NAME ..."
    - |
      ssh $SERVER_USER@$SERVER_HOST bash -c "'
        set -e

        echo \"üì¶ Reading test_passed.txt for deployment...\"
        TEST_PASSED_FILE=\"$LOGS_PATH/pipeline_logs/$TIMESTAMP/test_passed.txt\"
        if [[ ! -f \"\$TEST_PASSED_FILE\" ]]; then
          echo \"‚ùå No test_passed.txt found. Deployment aborted.\"
          exit 1
        fi

        BACKUP_TIME=\$(date +'%Y%m%d_%H%M%S')
        DEPLOYED_COUNT=0

        while IFS= read -r job; do
          if [[ -f \"$VIYA_CODE_PATH/\$job\" ]]; then
            echo \"üóÑ Backing up \$job to Viya_backup_code/\"
            cp \"$VIYA_CODE_PATH/\$job\" \"$BACKUP_PATH/\${job%.sas}_\${BACKUP_TIME}.sas\"

            echo \"üìÇ Moving \$job to Prod/Viya_code/\"
            mv \"$VIYA_CODE_PATH/\$job\" \"$PROD_PATH/Viya_code/\"
            echo \"\$job\" >> \"$LOGS_PATH/pipeline_logs/$TIMESTAMP/deployment_passed.txt\"
            DEPLOYED_COUNT=\$((DEPLOYED_COUNT + 1))
          else
            echo \"‚ö†Ô∏è  Skipping \$job. File not found in Viya_code.\"
          fi
        done < \"\$TEST_PASSED_FILE\"

        echo \"üßπ Cleaning up Viya_code folder in Discovery...\"
        rm -rf \"$VIYA_CODE_PATH\"/*

        echo \"‚úÖ Deployment completed: \$DEPLOYED_COUNT jobs moved to Prod.\"
      '"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
