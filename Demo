Perfect ‚úÖ Let‚Äôs update all scripts so they fully support direct log streaming into GitLab UI and behave exactly as we discussed. I‚Äôll also show you how the output will look in the GitLab pipeline.


---

üöÄ Updated Scripts with Direct Streaming


---

üìù 1. Lint_sas_code.py

#!/usr/bin/env python3

import os
import sys

main_sas = sys.argv[1]
sas9_code_path = sys.argv[2]
log_path = os.path.join(os.path.dirname(main_sas), "Logs")

passed_file = os.path.join(log_path, "lint_passed.txt")
failed_file = os.path.join(log_path, "lint_failed.txt")

# Ensure logs directory exists
os.makedirs(log_path, exist_ok=True)

# Clear previous log files
open(passed_file, 'w').close()
open(failed_file, 'w').close()

print(f"üîç Linting SAS9 code in {sas9_code_path}...", flush=True)

for job in sorted(os.listdir(sas9_code_path)):
    if job.endswith(".sas"):
        job_path = os.path.join(sas9_code_path, job)
        try:
            # Simulated lint check: Fail if file contains "ERROR"
            with open(job_path) as f:
                content = f.read()
                if "ERROR" in content:
                    print(f"‚ùå Lint failed: {job}", flush=True)
                    with open(failed_file, 'a') as fail_log:
                        fail_log.write(f"{job}\n")
                else:
                    print(f"‚úÖ Lint passed: {job}", flush=True)
                    with open(passed_file, 'a') as pass_log:
                        pass_log.write(f"{job}\n")
        except Exception as e:
            print(f"‚ùå Exception while linting {job}: {e}", flush=True)
            with open(failed_file, 'a') as fail_log:
                fail_log.write(f"{job}\n")

print("üèÅ Linting completed.", flush=True)


---

üìù 2. Convert_sas9_to_viya.py

#!/usr/bin/env python3

import os
import sys
import shutil

sas9_code_path = sys.argv[1]
viya_code_path = sys.argv[2]
log_path = os.path.join(os.path.dirname(sas9_code_path), "Logs")

lint_passed_file = os.path.join(log_path, "lint_passed.txt")
passed_file = os.path.join(log_path, "convert_passed.txt")
failed_file = os.path.join(log_path, "convert_failed.txt")

# Ensure logs directory exists
os.makedirs(log_path, exist_ok=True)

# Clear previous logs
open(passed_file, 'w').close()
open(failed_file, 'w').close()

print(f"üîÑ Converting SAS9 code to Viya in {viya_code_path}...", flush=True)

# Clean viya_code_path
shutil.rmtree(viya_code_path, ignore_errors=True)
os.makedirs(viya_code_path, exist_ok=True)

try:
    with open(lint_passed_file, 'r') as f:
        jobs = [line.strip() for line in f if line.strip()]
except FileNotFoundError:
    print("‚ùå lint_passed.txt not found. Stopping conversion.", flush=True)
    sys.exit(1)

for job in jobs:
    try:
        src = os.path.join(sas9_code_path, job)
        dest = os.path.join(viya_code_path, job.replace(".sas", "_viya.sas"))
        shutil.copyfile(src, dest)
        print(f"‚úÖ Converted: {job} ‚Üí {os.path.basename(dest)}", flush=True)
        with open(passed_file, 'a') as pass_log:
            pass_log.write(f"{job}\n")
    except Exception as e:
        print(f"‚ùå Conversion failed: {job} - {e}", flush=True)
        with open(failed_file, 'a') as fail_log:
            fail_log.write(f"{job}\n")

print("üèÅ Conversion completed.", flush=True)


---

üìù 3. Run_viya_jobs.sh

#!/bin/bash
set -euo pipefail

MAIN_SAS="$1"
VIYA_CODE_PATH="$2"
LOGS_PATH="$3"
PASSED_FILE="$LOGS_PATH/convert_passed.txt"
RUN_PASSED_FILE="$LOGS_PATH/run_passed.txt"
RUN_FAILED_FILE="$LOGS_PATH/run_failed.txt"

# Clear previous logs
> "$RUN_PASSED_FILE"
> "$RUN_FAILED_FILE"

echo "üöÄ Running Viya jobs for: $MAIN_SAS"

while IFS= read -r job; do
  viya_job="${job%.sas}_viya.sas"
  viya_job_path="$VIYA_CODE_PATH/$viya_job"

  if [[ -f "$viya_job_path" ]]; then
    echo "‚ñ∂ Running: $viya_job"
    if grep -q "FAIL" "$viya_job_path"; then
      echo "‚ùå Run failed: $viya_job"
      echo "$job" >> "$RUN_FAILED_FILE"
    else
      echo "‚úÖ Run passed: $viya_job"
      echo "$job" >> "$RUN_PASSED_FILE"
    fi
  else
    echo "‚ùå Missing Viya job: $viya_job"
    echo "$job" >> "$RUN_FAILED_FILE"
  fi
done < "$PASSED_FILE"

echo "üèÅ Viya job execution completed."


---

üìù 4. Compare_outputs.py

(This is a dummy implementation for now.)

#!/usr/bin/env python3

import os
import sys

baseline_outputs = sys.argv[1]
viya_outputs = sys.argv[2]
log_path = os.path.join(os.path.dirname(baseline_outputs), "../Logs")

run_passed_file = os.path.join(log_path, "run_passed.txt")
passed_file = os.path.join(log_path, "test_passed.txt")
failed_file = os.path.join(log_path, "test_failed.txt")

# Clear previous logs
open(passed_file, 'w').close()
open(failed_file, 'w').close()

print(f"üß™ Comparing outputs between {baseline_outputs} and {viya_outputs}...", flush=True)

try:
    with open(run_passed_file, 'r') as f:
        jobs = [line.strip() for line in f if line.strip()]
except FileNotFoundError:
    print("‚ùå run_passed.txt not found. Stopping testing.", flush=True)
    sys.exit(1)

for job in jobs:
    # Simulate comparison: Pass if filename does not contain "mismatch"
    if "mismatch" in job:
        print(f"‚ùå Test failed: {job}", flush=True)
        with open(failed_file, 'a') as fail_log:
            fail_log.write(f"{job}\n")
    else:
        print(f"‚úÖ Test passed: {job}", flush=True)
        with open(passed_file, 'a') as pass_log:
            pass_log.write(f"{job}\n")

print("üèÅ Testing completed.", flush=True)


---

üì¨ Email Script

‚úÖ Includes pass/fail numbers and HTML formatting
‚úÖ Runs as a stage at the end

#!/bin/bash
set -euo pipefail

LOGS_PATH="$1"
EMAIL_TO="$2"

LINT_PASSED=$(wc -l < "$LOGS_PATH/lint_passed.txt" || echo 0)
LINT_FAILED=$(wc -l < "$LOGS_PATH/lint_failed.txt" || echo 0)
CONVERT_PASSED=$(wc -l < "$LOGS_PATH/convert_passed.txt" || echo 0)
CONVERT_FAILED=$(wc -l < "$LOGS_PATH/convert_failed.txt" || echo 0)
RUN_PASSED=$(wc -l < "$LOGS_PATH/run_passed.txt" || echo 0)
RUN_FAILED=$(wc -l < "$LOGS_PATH/run_failed.txt" || echo 0)
TEST_PASSED=$(wc -l < "$LOGS_PATH/test_passed.txt" || echo 0)
TEST_FAILED=$(wc -l < "$LOGS_PATH/test_failed.txt" || echo 0)

SUBJECT="SAS Viya Pipeline Results"
BODY=$(cat <<EOF
<html>
<body>
  <h2>üìä SAS Viya Pipeline Summary</h2>
  <table border="1" cellpadding="5" cellspacing="0">
    <tr><th>Stage</th><th>Passed</th><th>Failed</th><th>Total</th></tr>
    <tr><td>Lint</td><td>$LINT_PASSED</td><td>$LINT_FAILED</td><td>$((LINT_PASSED+LINT_FAILED))</td></tr>
    <tr><td>Convert</td><td>$CONVERT_PASSED</td><td>$CONVERT_FAILED</td><td>$((CONVERT_PASSED+CONVERT_FAILED))</td></tr>
    <tr><td>Run</td><td>$RUN_PASSED</td><td>$RUN_FAILED</td><td>$((RUN_PASSED+RUN_FAILED))</td></tr>
    <tr><td>Test</td><td>$TEST_PASSED</td><td>$TEST_FAILED</td><td>$((TEST_PASSED+TEST_FAILED))</td></tr>
  </table>
  <p><b>GitLab Pipeline:</b> <a href="$CI_PIPELINE_URL">$CI_PIPELINE_URL</a></p>
</body>
</html>
EOF
)

echo "üìß Sending email report..."
echo "$BODY" | mail -a "Content-Type: text/html" -s "$SUBJECT" "$EMAIL_TO"


---

deploy:
  stage: deploy
  script:
    - echo "üöö Starting Deployment for $GROUP_NAME/$APP_NAME ..."
    - |
      ssh $SERVER_USER@$SERVER_HOST bash -c "'
        set -e

        echo \"üì¶ Reading test_passed.txt for deployment...\"
        TEST_PASSED_FILE=\"$LOGS_PATH/pipeline_logs/$TIMESTAMP/test_passed.txt\"
        if [[ ! -f \"\$TEST_PASSED_FILE\" ]]; then
          echo \"‚ùå No test_passed.txt found. Deployment aborted.\"
          exit 1
        fi

        BACKUP_TIME=\$(date +'%Y%m%d_%H%M%S')
        DEPLOYED_COUNT=0

        while IFS= read -r job; do
          if [[ -f \"$VIYA_CODE_PATH/\$job\" ]]; then
            echo \"üóÑ Backing up \$job to Viya_backup_code/\"
            cp \"$VIYA_CODE_PATH/\$job\" \"$BACKUP_PATH/\${job%.sas}_\${BACKUP_TIME}.sas\"

            echo \"üìÇ Moving \$job to Prod/Viya_code/\"
            mv \"$VIYA_CODE_PATH/\$job\" \"$PROD_PATH/Viya_code/\"
            echo \"\$job\" >> \"$LOGS_PATH/pipeline_logs/$TIMESTAMP/deployment_passed.txt\"
            DEPLOYED_COUNT=\$((DEPLOYED_COUNT + 1))
          else
            echo \"‚ö†Ô∏è  Skipping \$job. File not found in Viya_code.\"
          fi
        done < \"\$TEST_PASSED_FILE\"

        echo \"üßπ Cleaning up Viya_code folder in Discovery...\"
        rm -rf \"$VIYA_CODE_PATH\"/*

        echo \"‚úÖ Deployment completed: \$DEPLOYED_COUNT jobs moved to Prod.\"
      '"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
