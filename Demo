✅ Perfect. To keep things simple for your demo, we’ll make every stage just write:

✅ Stage passed for the following SAS files:
 - sample.sas

…into its *_passed.txt.

We won’t bother dynamically listing real .sas files. This way, you get dummy logs that look clean and predictable for your CICD pipeline testing.


---

📝 Updated Scripts (write only sample.sas in *_passed.txt)


---

✅ 1. Lint_sas.py

# Lint_sas.py
import os

log_dir = os.environ.get("CURRENT_LOG_PATH", "./logs")
os.makedirs(log_dir, exist_ok=True)

passed_file = os.path.join(log_dir, "lint_passed.txt")
failed_file = os.path.join(log_dir, "lint_failed.txt")

try:
    print("🧹 Simulating linting of SAS files...")
    with open(passed_file, "w") as f:
        f.write("✅ Lint check passed for the following SAS files:\n")
        f.write(" - sample.sas\n")
    if os.path.exists(failed_file):
        os.remove(failed_file)
    print("✅ Linting completed. Wrote to lint_passed.txt")
except Exception as e:
    with open(failed_file, "w") as f:
        f.write(f"❌ Lint check failed: {e}\n")
    if os.path.exists(passed_file):
        os.remove(passed_file)
    print("❌ Linting failed.")
    exit(1)


---

✅ 2. Convert_sas.py

# Convert_sas.py
import os

log_dir = os.environ.get("CURRENT_LOG_PATH", "./logs")
os.makedirs(log_dir, exist_ok=True)

passed_file = os.path.join(log_dir, "convert_passed.txt")
failed_file = os.path.join(log_dir, "convert_failed.txt")

# Check previous stage
lint_passed = os.path.join(log_dir, "lint_passed.txt")
if not os.path.exists(lint_passed):
    print("❌ Previous stage (lint) failed or not run. Exiting.")
    with open(failed_file, "w") as f:
        f.write("❌ Conversion skipped because lint failed.\n")
    if os.path.exists(passed_file):
        os.remove(passed_file)
    exit(1)

try:
    print("🔄 Simulating conversion of SAS files...")
    with open(passed_file, "w") as f:
        f.write("✅ Conversion passed for the following SAS files:\n")
        f.write(" - sample.sas\n")
    if os.path.exists(failed_file):
        os.remove(failed_file)
    print("✅ Conversion completed. Wrote to convert_passed.txt")
except Exception as e:
    with open(failed_file, "w") as f:
        f.write(f"❌ Conversion failed: {e}\n")
    if os.path.exists(passed_file):
        os.remove(passed_file)
    print("❌ Conversion failed.")
    exit(1)


---

✅ 3. run_sas.sh

#!/bin/bash

echo "🚀 Simulating SAS program execution..."

# Paths
LOG_DIR="${CURRENT_LOG_PATH:-./logs}"
PASSED_FILE="$LOG_DIR/run_passed.txt"
FAILED_FILE="$LOG_DIR/run_failed.txt"
PREV_PASSED_FILE="$LOG_DIR/convert_passed.txt"

mkdir -p "$LOG_DIR"

# Check previous stage
if [ ! -f "$PREV_PASSED_FILE" ]; then
    echo "❌ Previous stage (convert) failed or not run. Exiting."
    echo "❌ Run stage skipped because convert failed." > "$FAILED_FILE"
    [ -f "$PASSED_FILE" ] && rm "$PASSED_FILE"
    exit 1
fi

# Simulate success
echo "✅ SAS run simulation completed for the following SAS files:" > "$PASSED_FILE"
echo " - sample.sas" >> "$PASSED_FILE"

[ -f "$FAILED_FILE" ] && rm "$FAILED_FILE"
echo "✅ Dummy SAS run successful. Log saved to $PASSED_FILE"


---

✅ 4. Compare_outputs.py

# Compare_outputs.py
import os

log_dir = os.environ.get("CURRENT_LOG_PATH", "./logs")
os.makedirs(log_dir, exist_ok=True)

passed_file = os.path.join(log_dir, "compare_passed.txt")
failed_file = os.path.join(log_dir, "compare_failed.txt")

# Check previous stage
run_passed = os.path.join(log_dir, "run_passed.txt")
if not os.path.exists(run_passed):
    print("❌ Previous stage (run) failed or not run. Exiting.")
    with open(failed_file, "w") as f:
        f.write("❌ Comparison skipped because run failed.\n")
    if os.path.exists(passed_file):
        os.remove(passed_file)
    exit(1)

try:
    print("🧪 Simulating comparison of outputs...")
    with open(passed_file, "w") as f:
        f.write("✅ Comparison passed for the following SAS files:\n")
        f.write(" - sample.sas\n")
    if os.path.exists(failed_file):
        os.remove(failed_file)
    print("✅ Comparison completed. Wrote to compare_passed.txt")
except Exception as e:
    with open(failed_file, "w") as f:
        f.write(f"❌ Comparison failed: {e}\n")
    if os.path.exists(passed_file):
        os.remove(passed_file)
    print("❌ Comparison failed.")
    exit(1)


---

🚀 What happens now?

Each stage always writes sample.sas into its *_passed.txt.

You can see sample.sas in lint_passed.txt, convert_passed.txt, run_passed.txt, and compare_passed.txt.

Pipeline stages still respect dependencies (each stage checks the previous one’s *_passed.txt).



---
